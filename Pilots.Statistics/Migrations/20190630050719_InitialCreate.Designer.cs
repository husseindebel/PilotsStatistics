// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pilots.Statistics.DAL;

namespace Pilots.Statistics.Migrations
{
    [DbContext(typeof(LeagueContext))]
    [Migration("20190630050719_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("Pilots.Statistics.Models.Competition", b =>
                {
                    b.Property<int>("CompetitionID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("StartDate");

                    b.HasKey("CompetitionID");

                    b.ToTable("Competition");

                    b.HasData(
                        new
                        {
                            CompetitionID = 1,
                            StartDate = new DateTimeOffset(new DateTime(2019, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 11, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Pilots.Statistics.Models.Match", b =>
                {
                    b.Property<int>("MatchID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Date");

                    b.Property<int?>("RoundID");

                    b.Property<int?>("TeamID");

                    b.HasKey("MatchID");

                    b.HasIndex("RoundID");

                    b.HasIndex("TeamID");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Pilots.Statistics.Models.Player", b =>
                {
                    b.Property<int>("PlayerID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("JerseyNumber");

                    b.Property<string>("Name");

                    b.Property<int?>("TeamID");

                    b.HasKey("PlayerID");

                    b.HasIndex("TeamID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Pilots.Statistics.Models.Rounds", b =>
                {
                    b.Property<int>("RoundID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Label");

                    b.HasKey("RoundID");

                    b.ToTable("Rounds");

                    b.HasData(
                        new
                        {
                            RoundID = 1,
                            Label = "1"
                        },
                        new
                        {
                            RoundID = 2,
                            Label = "2"
                        },
                        new
                        {
                            RoundID = 3,
                            Label = "3"
                        },
                        new
                        {
                            RoundID = 4,
                            Label = "4"
                        },
                        new
                        {
                            RoundID = 5,
                            Label = "5"
                        },
                        new
                        {
                            RoundID = 6,
                            Label = "6"
                        },
                        new
                        {
                            RoundID = 7,
                            Label = "7"
                        },
                        new
                        {
                            RoundID = 8,
                            Label = "8"
                        },
                        new
                        {
                            RoundID = 9,
                            Label = "9"
                        },
                        new
                        {
                            RoundID = 10,
                            Label = "10"
                        },
                        new
                        {
                            RoundID = 11,
                            Label = "Semi-Final"
                        },
                        new
                        {
                            RoundID = 12,
                            Label = "Final"
                        },
                        new
                        {
                            RoundID = 13,
                            Label = "Pre-Season"
                        },
                        new
                        {
                            RoundID = 14,
                            Label = "Friendly"
                        });
                });

            modelBuilder.Entity("Pilots.Statistics.Models.Season", b =>
                {
                    b.Property<int>("SeasonID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompetitionID");

                    b.Property<int>("Division");

                    b.Property<string>("Name");

                    b.HasKey("SeasonID");

                    b.HasIndex("CompetitionID");

                    b.ToTable("Season");

                    b.HasData(
                        new
                        {
                            SeasonID = 1,
                            CompetitionID = 1,
                            Division = 2,
                            Name = "Autumn 2019"
                        });
                });

            modelBuilder.Entity("Pilots.Statistics.Models.Team", b =>
                {
                    b.Property<int>("TeamID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Colour");

                    b.HasKey("TeamID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Pilots.Statistics.Models.Match", b =>
                {
                    b.HasOne("Pilots.Statistics.Models.Rounds", "Round")
                        .WithMany("Matches")
                        .HasForeignKey("RoundID");

                    b.HasOne("Pilots.Statistics.Models.Team")
                        .WithMany("Matches")
                        .HasForeignKey("TeamID");
                });

            modelBuilder.Entity("Pilots.Statistics.Models.Player", b =>
                {
                    b.HasOne("Pilots.Statistics.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamID");
                });

            modelBuilder.Entity("Pilots.Statistics.Models.Season", b =>
                {
                    b.HasOne("Pilots.Statistics.Models.Competition", "Competition")
                        .WithMany("Seasons")
                        .HasForeignKey("CompetitionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
